import session from 'express-session';
import passport from 'passport';
import { Strategy as GoogleStrategy } from 'passport-google-oauth20';

import 'dotenv/config';
import express from 'express';
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Navbar        from './components/Navbar';
import Login         from './components/Login';
import Questionnaire from './pages/Questionnaire';

const app = express();
app.use(session({
  secret: process.env.SESSION_SECRET || 'change-me',
  resave: false,
  saveUninitialized: false,
  cookie: { secure: true, sameSite: 'lax' } // secure requires HTTPS (AutoSSL)
}));

app.use(passport.initialize());
app.use(passport.session());
passport.serializeUser((user, done) => done(null, user));
passport.deserializeUser((obj, done) => done(null, obj));

assport.use(new GoogleStrategy(
  {
    clientID:     process.env.GOOGLE_CLIENT_ID,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    callbackURL:  process.env.GOOGLE_CALLBACK_URL,
    state: true   // CSRF protection
  },
  (accessToken, refreshToken, profile, done) => {
    // Minimal: persist email for your app.
    const email = profile.emails?.[0]?.value?.toLowerCase();
    if (!email) return done(null, false);
    // You can upsert into SQLite here if you want.
    return done(null, { email, provider: 'google', id: profile.id });
  }
));

app.get('/auth/google', passport.authenticate('google', { scope: ['email','profile'] }));

app.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/login', successRedirect: '/proust' })
);

export default function App() {
  return (
    <BrowserRouter>
      <Routes>
        <Route path="/components/Login" element={<Login />} />
        <Route path="/components/callback" element={<Callback />} />
        <Route path="/components/questions" element={<Questionnaire />} />
      </Routes>
    </BrowserRouter>
  );
}
export default app; // or: module.exports = app;
